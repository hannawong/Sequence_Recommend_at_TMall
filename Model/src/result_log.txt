DNN (baseline, maxlen = 20, 3 layers, relu):
iter: 2000 ----> train_loss: 0.2501 ---- train_accuracy: 0.7439
test_auc: 0.8995 ----test_loss: 0.2006 ---- test_accuracy: 0.8225 
iter: 4000 ----> train_loss: 0.1946 ---- train_accuracy: 0.8268
test_auc: 0.9143 ----test_loss: 0.1856 ---- test_accuracy: 0.8367 
iter: 6000 ----> train_loss: 0.0171 ---- train_accuracy: 0.2867
test_auc: 0.8229 ----test_loss: 0.4580 ---- test_accuracy: 0.7126 
iter: 8000 ----> train_loss: 0.0462 ---- train_accuracy: 0.9666
test_auc: 0.8853 ----test_loss: 0.3266 ---- test_accuracy: 0.8085 

=====================================================================================

Vanilla_RNN(maxlen = 20, hiddensize = 32,  relu):
iter: 2000 ----> train_loss: 0.2296 ---- train_accuracy: 0.7737
test_auc: 0.9090 ----test_loss: 0.1915 ---- test_accuracy: 0.8321 
iter: 4000 ----> train_loss: 0.1893 ---- train_accuracy: 0.8320
test_auc: 0.9209 ----test_loss: 0.1790 ---- test_accuracy: 0.8418
iter: 6000 ----> train_loss: 0.0234 ---- train_accuracy: 0.2805
test_auc: 0.8606 ----test_loss: 0.3806 ---- test_accuracy: 0.7692 
iter: 8000 ----> train_loss: 0.0432 ---- train_accuracy: 0.9682
test_auc: 0.8896 ----test_loss: 0.3355 ---- test_accuracy: 0.8102 

=========================================================
GRU: overcomes the vanishing gradients problem of RNN and is faster than LSTM(Hochreiter and Schmidhuber, 1997)


=========================================================

DIN(maxlen = 20,hiddensize = 32, relu)
iter: 2000 ----> train_loss: 0.2340 ---- train_accuracy: 0.7724
test_auc: 0.9063 ----test_loss: 0.1944 ---- test_accuracy: 0.8285 
iter: 4000 ----> train_loss: 0.1831 ---- train_accuracy: 0.8393
test_auc: 0.9287 ----test_loss: 0.1697 ---- test_accuracy: 0.8543 

=========================================================

DIEN without auxillary loss(maxlen = 20, hiddensize=32,relu)
iter: 2000 ----> train_loss: 0.2378 ---- train_accuracy: 0.7590
test_auc: 0.9138 ----test_loss: 0.1868 ---- test_accuracy: 0.8355 
iter: 4000 ----> train_loss: 0.1804 ---- train_accuracy: 0.8426
test_auc: 0.9279 ----test_loss: 0.1710 ---- test_accuracy: 0.8526 
=======
DIEN with auxillary loss(maxlen = 20,hiddensize = 32, relu)
iter: 2000 ----> train_loss: 1.3836 ---- train_accuracy: 0.7750
test_auc: 0.9123 ----test_loss: 1.1804 ---- test_accuracy: 0.8346 
iter: 4000 ----> train_loss: 1.1201 ---- train_accuracy: 0.8430
test_auc: 0.9298 ----test_loss: 1.1114 ---- test_accuracy: 0.8549
=======
DIEN with auxillary loss(maxlen = 20, hiddensize = 32, relu, concat self.item_his_eb_sum, self.item_eb*self.item_his_eb_sum)
iter: 2000 ----> train_loss: 1.4566 ---- train_accuracy: 0.7541
test_auc: 0.9127 ----test_loss: 1.2094 ---- test_accuracy: 0.8337 
iter: 4000 ----> train_loss: 1.1271 ---- train_accuracy: 0.8449
test_auc: 0.9325 ----test_loss: 1.1142 ---- test_accuracy: 0.8584 